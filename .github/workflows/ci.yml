name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        run: |
              pip install toml
              VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['version'])")
              docker build -t my-fastapi-app:$VERSION .

  code-quality:
    needs: [build]
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Use Docker image from build stage
        run: |
          pip install toml
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['version'])")
          docker pull my-fastapi-app:$VERSION

      - name: Code Quality Check
        run: |
          docker run --rm my-fastapi-app:$VERSION bash -c "pip install pre-commit && pre-commit run --all-files"

  test:
    needs: [build]
    timeout-minutes: 15
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16.3-alpine3.19
        env:
          POSTGRES_USER: POSTGRES_USER
          POSTGRES_PASSWORD: POSTGRES_PASSWORD
          POSTGRES_DB: POSTGRES_DB
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Use Docker image from build stage
        run: |
          pip install toml
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['version'])")
          docker pull my-fastapi-app:$VERSION 

      - name: Run tests
        run: |
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['version'])")
          docker run --rm my-fastapi-app:$VERSION pytest
